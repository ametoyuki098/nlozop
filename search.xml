<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jolin</title>
      <link href="/nlozop/jolin/"/>
      <url>/nlozop/jolin/</url>
      
        <content type="html"><![CDATA[<p>介绍：此博文记录在安卓手机（平板）termux中安装配置hexo博客的过程，主题使用以及托管。</p><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>开始之前，请确保已准备好以下内容：</p><ul><li><input disabled="" type="checkbox"> 安装termux 在<a href="https://f-droid.org/packages/com.termux">F-Droid</a>商店，或<a href="https://github.com/termux/termux-app">GitHub</a>仓库中安装 （也可以安装修改版的zerotermux它更适合操作）</li><li><input disabled="" type="checkbox"> 一个域名 （可选）</li><li><input disabled="" type="checkbox"> GitHub账号</li><li><input disabled="" type="checkbox"> Cloudflare （可选）</li></ul><h2 id="安装必要环境"><a href="#安装必要环境" class="headerlink" title="安装必要环境"></a>安装必要环境</h2><p><strong>启动Termux应用后，请按顺序输入以下命令，以完成初始设置并安装所需的运行环境：</strong></p><blockquote><p>termux本身会触发系统弹窗，要求用户授权存储访问权限。如果没有需要执行<code>termux-setup-storage</code>指令后授权。另外还需要手动开启通知权限</p></blockquote><ul><li>更新Termux的包信息和版本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade</span><br></pre></td></tr></table></figure></li></ul><p>过程中若出现确认提示，直接回车即可。如遇网络缓慢，可考虑更换镜像源。</p><ul><li>在上个步骤完成后，执行以下命令安装nodejs  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs-lts</span><br></pre></td></tr></table></figure></li></ul><h2 id="hexo安装与初始化"><a href="#hexo安装与初始化" class="headerlink" title="hexo安装与初始化"></a>hexo安装与初始化</h2><ul><li>npm安装hexo<br><code>npm install hexo-cli -g</code></li></ul><ol><li>使用<code>mkdir youname</code>创建一个文件夹</li><li><code>cd youname</code> 进入此文件夹</li><li>在后续之前执行<code>hexo -v</code>查看是否安装成功</li><li>再执行<code>hexo init</code>进行初始化创建</li><li><code>npm install</code>安装所需依赖</li></ol><p><img src="/nlozop/:/b673710ecae64fb2965df20ce5fa7418" alt="Screenshot_2025_0823_212616.png"></p><p><strong>你也可以依次执行官方的安装操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><u> <code>blog</code>只是一个示例，你可以改成如<code>demobolg</code> <code>myblog</code>…等其它自定义名称</u></p><h3 id="生成启动本地预览"><a href="#生成启动本地预览" class="headerlink" title="生成启动本地预览"></a>生成启动本地预览</h3><p><code>hexo generate</code>生成静态文件<br><code>hexo server</code>开启本地预览<br>执行完成后会返回一个预览地址<u><em><a href="http://localhost:4000/">http://localhost:4000/</a></em></u>在浏览器打开，就能看见博客。</p><h3 id="文件夹结构"><a href="#文件夹结构" class="headerlink" title="文件夹结构"></a>文件夹结构</h3><p>当你在博客根目录使用ls列出文件</p><ul><li>其中<code>_config.yml</code>是hexo主配置内容，管理全局设置，部署等…</li><li><code>source</code>是存放创建的文章和页面。</li><li>然后是<code>public</code>，当用户执行<strong>hexo generate</strong>所生成的静态文件就存放在该目录下，也可以编辑 <strong>_config.yml</strong>自定义生成目录。</li><li>其余文件和目录是一些依赖和管理。不需要触碰<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"> ├── _config.butterfly.yml</span><br><span class="line"> ├── _config.landscape.yml</span><br><span class="line"> ├── _config.yml</span><br><span class="line"> ├── db.json</span><br><span class="line"> ├── node_modules</span><br><span class="line"> ├── package-lock.json</span><br><span class="line"> ├── package.json</span><br><span class="line"> ├── public</span><br><span class="line"> ├── scaffolds</span><br><span class="line"> └── source</span><br></pre></td></tr></table></figure></li></ul><p>通过以上步骤，博客基础就算搭建完成。但目前还是只能在本地开发预览，接下来是通过静态托管实现全网访问。</p><h2 id="静态托管"><a href="#静态托管" class="headerlink" title="静态托管"></a>静态托管</h2><ol><li>首先需要一个github账户。<u><a href="https://github.com/">https://github.com</a></u>前往该地址进行注册。</li><li>创建一个新的仓库<ul><li>仓库名填写你创建时填写的用户名+github.io</li><li>选择公开仓库</li></ul></li><li>回到终端，**_config.yml**编辑hexo的配置文件</li></ol><hr><p><code>pkg install git </code>安装Git</p><p>再执行两行命令配置Git用户信息（替换自己的邮箱和用户名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.email &quot;other-email@company.com&quot;</span><br><span class="line">git config user.name &quot;Work Account&quot;</span><br></pre></td></tr></table></figure><hr><p>用nano或vim进行编辑<br>使用vim需要安装<code>pkg install vim -y</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:ametoyuki098/ametoyuki098.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>用编辑器打开<code>_config.yml</code>文件，找到<code>deploy</code>配置项，将其中的<code>rope</code>字段替换为你自己的仓库地址。</p><p>安装推送插件<br><code>npm install hexo-deployer-git --save</code></p><blockquote><p>接下来是申请密钥并添加公钥到GitHub。如果你使用的不是ssh，则需要去GitHub申请一个身份令牌供推送使用。下面是两种方式的使用情况</p></blockquote><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>执行<code>pkg install openssh</code>安装openssh</p><p><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></p><p>自行替换邮箱地址，然后根据输出信息找到密钥位置。<code>cat </code>查看公钥内容复制全部。<br>根据图中步骤找到相应位置粘贴保存。</p><p>图片<br>测试ssh连接<code>ssh -T git@github.com</code><br>输出信息如：<code>Hi ametoyuki098! You&#39;ve successfully authenticated...</code>说明配置成功</p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>图片<br>按照该步骤申请身份令牌<br><strong>令牌创建成功只会显示一次，务必保存好</strong><br>此时在进行<code>hexo d</code>推送操作，在输入用户名后提示输入密码便是此令牌，粘贴回车便可推送。</p><p>但这样每一次推送都需要手动输入令牌<br>可以根据<em>hexo-deployer</em>官方文档进行token配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://&lt;TOKEN&gt;@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p><code>&lt;TOKEN&gt;</code>替换为你刚刚生成的令牌，<code>&lt;USERNAME&gt;</code> <code>&lt;RERO&gt;</code>替换成你的用户名</p><p>但是这种方式令牌是明文写在<code>_config.yml</code>中。推荐使用环境变量的方式写入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://$GITHUB_TOKEN@github.com/&lt;USERNAME&gt;/&lt;REPO&gt;.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>然后在终端执行这个命令设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GITHUB_TOKEN=你的token</span><br></pre></td></tr></table></figure><p>如成功推送，届时你可以访问<a href="https://username.github.io(username更换为你自己的用户名)/">https://username.github.io（username更换为你自己的用户名）</a></p><h2 id="安装与配置-Butterfly"><a href="#安装与配置-Butterfly" class="headerlink" title="安装与配置 Butterfly"></a>安装与配置 Butterfly</h2><blockquote><p><a href="https://butterfly.js.org/posts/21cfbf15/"><code>Butterfly</code></a>主题为此次演示。更多的主题样式你可以查看<a href="https://hexo.io/themes/">Hexo主题预览</a></p></blockquote><p>你可以使用npm或Git的方式安装主题，这里大概过一下。<br>而更详细以及主题后续配置请前往：<a href="https://butterfly.js.org/">https://butterfly.js.org</a></p><ul><li><p>使用npm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure></li><li><p>使用Git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li><li><p>安装渲染插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><ol><li><p>编辑博客主目录下<code>_config.yml</code>文件，找到<code>theme</code>字段并修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令，就能在本地看见主题效果</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><s>- 通过 npm 安装，配置在：<code>node_modules/hexo-theme-butterfly/_config.yml</code></p><ul><li>如果通过 Git clone 安装，配置在：<code>themes/butterfly/_config.yml</code></s></li></ul><p>为了便于后续自定义，请将主题默认配置复制到博客根目录并重命名为 <code>_config-butterfly.yml</code>。根据你的安装方式，只执行下面对应的一条命令：</p><p>为了后续配置方便，需要把主题的配置文件复制到博客根目录并改名为<code>_config-butterfly.yml</code>。 根据安装方式执行对应命令（请确保你处在博客根目录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp node_modules/hexo-theme-butterfly/_config.yml ./_config-butterfly.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp themes/butterfly/_config.yml ./_config-butterfly.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你可以尝试用编辑器打开<code>_config-butterfly.yml</code>这个文件，并找到<code>index_img</code>字段修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index_img: https://87c80b6.webp.li/i/2025/04/11/13d</span><br><span class="line">xcy-x7.jpg</span><br></pre></td></tr></table></figure><p>当再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>主页被设置成一张图片</p><p>这就是butterfly主题的基本安装。而对于<code>_config-butterfly.yml</code>配置说明，需要你自行阅读<a href="https://butterfly.js.org/posts/4aa8abbe/">butterfly主题配置</a>这篇文章。</p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p><span style="color:red;">这是红色文字</span></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    graph TD    %% 类定义    classDef startNode fill:#4caf50, color:white, stroke:#2e7d32, stroke-width:3px, rx:15, ry:15    classDef processNode fill:#2196f3, color:white, stroke:#0d47a1, stroke-width:2px    classDef endNode fill:#ff9800, color:white, stroke:#e65100, stroke-width:3px, rx:15, ry:15    %% 节点定义    A[👤 点击 GitHub 右上角头像] --&gt; B[⚙️ Settings&lt;br&gt;设置]    B --&gt; C[🔧 Developer settings&lt;br&gt;开发者设置]    C --&gt; D[🔑 Personal access tokens&lt;br&gt;个人访问令牌]    D --&gt; E[✨ Generate new token&lt;br&gt;生成新令牌]    %% 应用样式类    class A startNode    class B,C,D processNode    class E endNode    %% 连线样式    linkStyle 0 stroke:#4caf50, stroke-width:2px    linkStyle 1 stroke:#2196f3, stroke-width:2px    linkStyle 2 stroke:#2196f3, stroke-width:2px    linkStyle 3 stroke:#ff9800, stroke-width:2px  </pre></div><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    graph TD  %% Layers  A[User Interface]  B[Prompt Processor]  C[API Gateway]  D[Orchestrator or Agent Framework]  E[Model Inference Server]  F[Foundation Model]  G[Vector Store - FAISS or Pinecone]  H[Document Store - PostgreSQL or MongoDB]  I[Embedding Generator]  J[External Tools - Web Search, APIs]  %% Connections  A --&gt; B  B --&gt; C  C --&gt; D  D --&gt; E  E --&gt; F  D --&gt; G  D --&gt; H  D --&gt; I  D --&gt; J  I --&gt; G  H --&gt; I  %% Classes  class A,B frontend;  class C,D logic;  class E,F model;  class G,H,I data;  class J tools;  %% Styles  classDef frontend fill:#E3F2FD,stroke:#1E88E5,stroke-width:2px;  classDef logic fill:#F1F8E9,stroke:#689F38,stroke-width:2px;  classDef model fill:#EDE7F6,stroke:#7E57C2,stroke-width:2px;  classDef data fill:#FFF3E0,stroke:#FB8C00,stroke-width:2px;  classDef tools fill:#FCE4EC,stroke:#D81B60,stroke-width:2px;  </pre></div><hr><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    graph TD    %% 类定义：低饱和色+圆润边角，区分节点类型    classDef startNode fill:#e8f5e9, color:#2e7d32, stroke:#4caf50, stroke-width:2px, rx:8, ry:8, fontSize:13px    classDef processNode fill:#e3f2fd, color:#1565c0, stroke:#2196f3, stroke-width:2px, rx:8, ry:8, fontSize:13px    classDef endNode fill:#fff3e0, color:#e65100, stroke:#ff9800, stroke-width:2px, rx:8, ry:8, fontSize:13px    %% 主流程    A[👤 点击 GitHub 右上角头像] --&gt; B[⚙️ Settings&lt;br&gt;设置]    B --&gt; C[🔧 Developer settings&lt;br&gt;开发者设置]    C --&gt; D[🔑 Personal access tokens&lt;br&gt;个人访问令牌]    D --&gt; E[✨ Generate new token&lt;br&gt;生成新令牌]    %% 右侧提示（通过虚线连接D）    D -.-&gt; F[❗ 请选择 “Classic Token（经典）”&lt;br&gt;不要选 fine-grained]    %% 应用样式类    class A startNode    class B,C,D processNode    class F processNode    class E endNode    %% 连线样式：主流程实线、F为虚线    linkStyle 0 stroke:#4caf50, stroke-width:1.5px, stroke-opacity:0.8    linkStyle 1 stroke:#2196f3, stroke-width:1.5px, stroke-opacity:0.8    linkStyle 2 stroke:#2196f3, stroke-width:1.5px, stroke-opacity:0.8    linkStyle 3 stroke:#2196f3, stroke-width:1.5px, stroke-opacity:0.8    linkStyle 4 stroke:#2196f3, stroke-width:1.5px, stroke-opacity:0.8, stroke-dasharray: 5 5  </pre></div>]]></content>
      
      
      
        <tags>
            
            <tag> jolin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pixiv</title>
      <link href="/nlozop/pixiv/"/>
      <url>/nlozop/pixiv/</url>
      
        <content type="html"><![CDATA[<p><img src="https://87c80b6.webp.li/i/2025/10/23/r6izz-x9.png" alt="0 (2).png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的测速</title>
      <link href="/nlozop/%E6%88%91%E7%9A%84%E6%B5%8B%E9%80%9F/"/>
      <url>/nlozop/%E6%88%91%E7%9A%84%E6%B5%8B%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>zsh -i -c exit  0.15s user 0.13s system 73% cpu 0.382 total</p><p><img src="https://87c80b6.webp.li/i/2025/10/23/rdqz2-w8.jpg" alt="Image_81786106534841.jpg"></p><p><img src="https://87c80b6.webp.li/i/2025/10/23/vtqit-z6.jpg" alt="Image_120540032044901.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的照片</title>
      <link href="/nlozop/%E6%88%91%E7%9A%84%E7%85%A7%E7%89%87/"/>
      <url>/nlozop/%E6%88%91%E7%9A%84%E7%85%A7%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2025/05/23/06/35/sparrow-9617024_1280.jpg" alt="图片"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdhjfp</title>
      <link href="/nlozop/gdhjfp/"/>
      <url>/nlozop/gdhjfp/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>おばさん (obasan)</strong> - 阿姨、大妈<ul><li><strong>おばあさん (obaasan)</strong> - 奶奶、老奶奶</li></ul></li><li><strong>おじさん (ojisan)</strong> - 叔叔、大叔<ul><li><strong>おじいさん (ojiisan)</strong> - 爷爷、老爷爷</li></ul></li><li><strong>ここ (koko)</strong> - 这里<ul><li><strong>こうこう (kookoo)</strong> - 高中</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>termux-hexo</title>
      <link href="/nlozop/termux-hexo/"/>
      <url>/nlozop/termux-hexo/</url>
      
        <content type="html"><![CDATA[<p>介绍：此博文记录在安卓手机（平板）termux中安装配置hexo博客的过程，主题使用以及远程部署。</p><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>开始之前，请确保已准备好以下内容：</p><ul><li>✅ 安装termux 在<a href="https://f-droid.org/packages/com.termux">F-Droid</a>商店，或<a href="https://github.com/termux/termux-app">GitHub</a>仓库中安装 （也可以安装修改版的zerotermux它更适合操作）</li><li>🔲 一个域名 （可选）</li><li>✅ GitHub账号</li><li>🔲 Cloudflare （可选）</li></ul><h2 id="安装必要环境"><a href="#安装必要环境" class="headerlink" title="安装必要环境"></a>安装必要环境</h2><ul><li><input checked="" disabled="" type="checkbox"> 更新Termux的包信息和版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade</span><br></pre></td></tr></table></figure><p>在这个过程中遇到确认请求一律回车。可能有速度慢等网络问题，可以更换镜像源。</p><ul><li><input disabled="" type="checkbox"> 在上个步骤完成后，执行以下命令安装nodejs</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs-lts</span><br></pre></td></tr></table></figure><h3 id="npm安装hexo"><a href="#npm安装hexo" class="headerlink" title="npm安装hexo"></a>npm安装hexo</h3><p><code>npm install hexo-cli -g</code></p><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><ol><li>使用<code>mkdir youname</code>创建一个文件夹</li><li><code>cd youname</code> 进入此文件夹</li><li>在后续之前执行<code>hexo -v</code>查看是否安装成功</li><li>再执行<code>hexo init</code>进行初始化创建</li><li><code>npm install</code>安装所需依赖</li></ol><p><strong>你也可以依次执行官方的安装操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><u> blog只是一个示例，你可以自定义成其他。如demobolg myblog…..</u></p><h3 id="生成启动本地预览"><a href="#生成启动本地预览" class="headerlink" title="生成启动本地预览"></a>生成启动本地预览</h3><p><code>hexo generate</code>生成静态文件<br><code>hexo server</code>开启本地预览<br>执行完成后会返回一个预览地址<u><a href="http://localhost:4000/">http://localhost:4000/</a></u>在浏览器打开，就能看见博客。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Myblog</title>
      <link href="/nlozop/Myblog/"/>
      <url>/nlozop/Myblog/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://87c80b6.webp.li/i/2025/08/28/18fxp2-vf.jpg" alt="5983397134688438570.jpg"><br><img src="https://87c80b6.webp.li/i/2025/08/28/18fxp5-eh.jpg" alt="5983397134688438572.jpg"><br><img src="https://87c80b6.webp.li/i/2025/08/28/18fxp6-4a.jpg" alt="5983397134688438571.jpg"><br><img src="https://87c80b6.webp.li/i/2025/08/28/18fxp6-tr.jpg" alt="5983397134688438569.jpg"><br><img src="https://87c80b6.webp.li/i/2025/08/28/18fxp7-05.jpg" alt="5983397134688438568.jpg"><br><img src="https://87c80b6.webp.li/i/2025/08/28/18fxp7-e1.jpg" alt="5983397134688438567.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一个自动部署的测试</title>
      <link href="/nlozop/dgxhjf/"/>
      <url>/nlozop/dgxhjf/</url>
      
        <content type="html"><![CDATA[<h3 id="情深深雨蒙蒙"><a href="#情深深雨蒙蒙" class="headerlink" title="情深深雨蒙蒙"></a>情深深雨蒙蒙</h3><h2 id="世界只在你眼中"><a href="#世界只在你眼中" class="headerlink" title="世界只在你眼中"></a>世界只在你眼中</h2><h1 id="疾风亦有归途"><a href="#疾风亦有归途" class="headerlink" title="疾风亦有归途"></a>疾风亦有归途</h1><p><strong>士兵们，前进！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 疾风劲草试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/nlozop/test/"/>
      <url>/nlozop/test/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.mp4 <span class="comment"># 这是ffmpeg的基础命令。</span></span><br><span class="line">magick <span class="comment"># 一个强大的命令行图片工具。</span></span><br><span class="line">pkg ins termux-api <span class="comment"># 安装此工具需先安装-termux-api插件，这样才能正常调用手机各类api。</span></span><br></pre></td></tr></table></figure><div class="aplayer"      data-id="1394167216"      data-server="netease"      data-type="song"      data-mutex="true"     data-autoplay="true"     data-preload="auto"      data-theme="#3F51B5"></div>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/nlozop/My-New-Post/"/>
      <url>/nlozop/My-New-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="你好世界"><a href="#你好世界" class="headerlink" title="你好世界"></a>你好世界</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
